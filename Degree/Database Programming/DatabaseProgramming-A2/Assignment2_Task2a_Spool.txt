SQL> SET ECHO ON
SQL> SET FEEDBACK ON
SQL> SET LINESIZE 200
SQL> SET PAGESIZE 200
SQL> SET SERVEROUTPUT ON
SQL> 
SQL> CREATE OR REPLACE PROCEDURE insert_route (sceduleNo INTEGER, departure VARCHAR, destination VARCHAR) AS
  2  
  3  CURSOR cur_route IS
  4  	     SELECT * FROM route WHERE SNO = sceduleNo ORDER BY RNO;
  5  
  6  v_row cur_route%ROWTYPE;
  7  v_lastDestination route.departure%TYPE;
  8  routeCount INTEGER := 1;
  9  
 10  sceduleNotExsist EXCEPTION;
 11  PRAGMA EXCEPTION_INIT(sceduleNotExsist,-20002);
 12  departureNotEqual EXCEPTION;
 13  PRAGMA EXCEPTION_INIT(departureNotEqual,-20001);
 14  BEGIN
 15  --business rule:
 16  --in same route number, departure must same with previos destination record, unless it's first route record.
 17  	     IF NOT cur_route%ISOPEN THEN
 18  		     OPEN cur_route;
 19  	     END IF;
 20  
 21  	     LOOP
 22  		     FETCH cur_route INTO v_row;
 23  		     EXIT WHEN cur_route%NOTFOUND;
 24  		     routeCount := routeCount + 1;
 25  		     v_lastDestination := v_row.destination;
 26  	     END LOOP;
 27  
 28  	     IF (cur_route%ROWCOUNT = 0) THEN
 29  			     RAISE sceduleNotExsist;
 30  	     ELSE
 31  		     IF (INITCAP(departure) != v_lastDestination) THEN
 32  			     RAISE departureNotEqual;
 33  		     END IF;
 34  		     INSERT INTO route (SNO,RNO,departure,destination) VALUES(sceduleNo,routeCount,INITCAP(departure),INITCAP(destination));
 35  	     END IF;
 36  
 37  	     CLOSE cur_route;
 38  EXCEPTION
 39  	     WHEN departureNotEqual THEN
 40  	     DBMS_OUTPUT.PUT_LINE('Error :' || SQLCODE || ',' || 'Departure must be same as previous destination.');
 41  	     ROLLBACK;
 42  	     WHEN sceduleNotExsist THEN
 43  	     DBMS_OUTPUT.PUT_LINE('Error :' || SQLCODE || ',' || 'Scedule Number Does Not Exsit.');
 44  	     ROLLBACK;
 45  	     WHEN OTHERS THEN
 46  	     DBMS_OUTPUT.PUT_LINE('An Error has Occured :' || SQLCODE || ','|| SQLERRM);
 47  	     ROLLBACK;
 48  END;
 49  /

Procedure created.

SQL> 
SQL> SPOOL OFF
